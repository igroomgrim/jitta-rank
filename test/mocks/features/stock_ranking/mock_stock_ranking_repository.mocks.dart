// Mocks generated by Mockito 5.4.5 from annotations
// in jitta_rank/test/mocks/features/stock_ranking/mock_stock_ranking_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:jitta_rank/core/error/error.dart' as _i5;
import 'package:jitta_rank/features/stock_ranking/domain/entities/ranked_stock.dart'
    as _i6;
import 'package:jitta_rank/features/stock_ranking/domain/repositories/stock_ranking_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StockRankingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStockRankingRepository extends _i1.Mock
    implements _i3.StockRankingRepository {
  MockStockRankingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.RankedStock>>> getStockRankings(
    int? limit,
    String? market,
    int? page,
    List<String>? sectors,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStockRankings,
          [
            limit,
            market,
            page,
            sectors,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RankedStock>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RankedStock>>(
          this,
          Invocation.method(
            #getStockRankings,
            [
              limit,
              market,
              page,
              sectors,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RankedStock>>>);

  @override
  _i4.Future<
      _i2.Either<_i5.Failure, List<_i6.RankedStock>>> filterStockRankings(
    String? keyword,
    String? market,
    List<String>? sectors,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterStockRankings,
          [
            keyword,
            market,
            sectors,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.RankedStock>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.RankedStock>>(
          this,
          Invocation.method(
            #filterStockRankings,
            [
              keyword,
              market,
              sectors,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.RankedStock>>>);
}
